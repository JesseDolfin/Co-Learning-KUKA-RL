# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/GetMeasurementsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetMeasurementsRequest(genpy.Message):
  _md5sum = "07fa6d68716a20141030e8bcbf164485"
  _type = "qb_device_srvs/GetMeasurementsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# request
int32 id
int32 max_repeats
bool get_positions
bool get_currents
bool get_distinct_packages
bool get_commands
"""
  __slots__ = ['id','max_repeats','get_positions','get_currents','get_distinct_packages','get_commands']
  _slot_types = ['int32','int32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,max_repeats,get_positions,get_currents,get_distinct_packages,get_commands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMeasurementsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.max_repeats is None:
        self.max_repeats = 0
      if self.get_positions is None:
        self.get_positions = False
      if self.get_currents is None:
        self.get_currents = False
      if self.get_distinct_packages is None:
        self.get_distinct_packages = False
      if self.get_commands is None:
        self.get_commands = False
    else:
      self.id = 0
      self.max_repeats = 0
      self.get_positions = False
      self.get_currents = False
      self.get_distinct_packages = False
      self.get_commands = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i4B().pack(_x.id, _x.max_repeats, _x.get_positions, _x.get_currents, _x.get_distinct_packages, _x.get_commands))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.max_repeats, _x.get_positions, _x.get_currents, _x.get_distinct_packages, _x.get_commands,) = _get_struct_2i4B().unpack(str[start:end])
      self.get_positions = bool(self.get_positions)
      self.get_currents = bool(self.get_currents)
      self.get_distinct_packages = bool(self.get_distinct_packages)
      self.get_commands = bool(self.get_commands)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i4B().pack(_x.id, _x.max_repeats, _x.get_positions, _x.get_currents, _x.get_distinct_packages, _x.get_commands))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.max_repeats, _x.get_positions, _x.get_currents, _x.get_distinct_packages, _x.get_commands,) = _get_struct_2i4B().unpack(str[start:end])
      self.get_positions = bool(self.get_positions)
      self.get_currents = bool(self.get_currents)
      self.get_distinct_packages = bool(self.get_distinct_packages)
      self.get_commands = bool(self.get_commands)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4B = None
def _get_struct_2i4B():
    global _struct_2i4B
    if _struct_2i4B is None:
        _struct_2i4B = struct.Struct("<2i4B")
    return _struct_2i4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/GetMeasurementsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class GetMeasurementsResponse(genpy.Message):
  _md5sum = "d03a565b7bb32cc57f36f5fb5a9f047a"
  _type = "qb_device_srvs/GetMeasurementsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# response
bool success
int32 failures
int16[] positions
int16[] currents
int16[] commands
time stamp
"""
  __slots__ = ['success','failures','positions','currents','commands','stamp']
  _slot_types = ['bool','int32','int16[]','int16[]','int16[]','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,failures,positions,currents,commands,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMeasurementsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.failures is None:
        self.failures = 0
      if self.positions is None:
        self.positions = []
      if self.currents is None:
        self.currents = []
      if self.commands is None:
        self.commands = []
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.success = False
      self.failures = 0
      self.positions = []
      self.currents = []
      self.commands = []
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.positions))
      length = len(self.currents)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.currents))
      length = len(self.commands)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.commands))
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.positions = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currents = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.commands = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.positions.tostring())
      length = len(self.currents)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.currents.tostring())
      length = len(self.commands)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.commands.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.positions = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.currents = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.commands = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
class GetMeasurements(object):
  _type          = 'qb_device_srvs/GetMeasurements'
  _md5sum = '61d005acb1e04c16b9b33b19436d5ede'
  _request_class  = GetMeasurementsRequest
  _response_class = GetMeasurementsResponse
