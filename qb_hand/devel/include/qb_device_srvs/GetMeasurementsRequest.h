// Generated by gencpp from file qb_device_srvs/GetMeasurementsRequest.msg
// DO NOT EDIT!


#ifndef QB_DEVICE_SRVS_MESSAGE_GETMEASUREMENTSREQUEST_H
#define QB_DEVICE_SRVS_MESSAGE_GETMEASUREMENTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qb_device_srvs
{
template <class ContainerAllocator>
struct GetMeasurementsRequest_
{
  typedef GetMeasurementsRequest_<ContainerAllocator> Type;

  GetMeasurementsRequest_()
    : id(0)
    , max_repeats(0)
    , get_positions(false)
    , get_currents(false)
    , get_distinct_packages(false)
    , get_commands(false)  {
    }
  GetMeasurementsRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , max_repeats(0)
    , get_positions(false)
    , get_currents(false)
    , get_distinct_packages(false)
    , get_commands(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _max_repeats_type;
  _max_repeats_type max_repeats;

   typedef uint8_t _get_positions_type;
  _get_positions_type get_positions;

   typedef uint8_t _get_currents_type;
  _get_currents_type get_currents;

   typedef uint8_t _get_distinct_packages_type;
  _get_distinct_packages_type get_distinct_packages;

   typedef uint8_t _get_commands_type;
  _get_commands_type get_commands;





  typedef boost::shared_ptr< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetMeasurementsRequest_

typedef ::qb_device_srvs::GetMeasurementsRequest_<std::allocator<void> > GetMeasurementsRequest;

typedef boost::shared_ptr< ::qb_device_srvs::GetMeasurementsRequest > GetMeasurementsRequestPtr;
typedef boost::shared_ptr< ::qb_device_srvs::GetMeasurementsRequest const> GetMeasurementsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator1> & lhs, const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.max_repeats == rhs.max_repeats &&
    lhs.get_positions == rhs.get_positions &&
    lhs.get_currents == rhs.get_currents &&
    lhs.get_distinct_packages == rhs.get_distinct_packages &&
    lhs.get_commands == rhs.get_commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator1> & lhs, const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qb_device_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07fa6d68716a20141030e8bcbf164485";
  }

  static const char* value(const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07fa6d68716a2014ULL;
  static const uint64_t static_value2 = 0x1030e8bcbf164485ULL;
};

template<class ContainerAllocator>
struct DataType< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qb_device_srvs/GetMeasurementsRequest";
  }

  static const char* value(const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request\n"
"int32 id\n"
"int32 max_repeats\n"
"bool get_positions\n"
"bool get_currents\n"
"bool get_distinct_packages\n"
"bool get_commands\n"
;
  }

  static const char* value(const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.max_repeats);
      stream.next(m.get_positions);
      stream.next(m.get_currents);
      stream.next(m.get_distinct_packages);
      stream.next(m.get_commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMeasurementsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qb_device_srvs::GetMeasurementsRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "max_repeats: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_repeats);
    s << indent << "get_positions: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_positions);
    s << indent << "get_currents: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_currents);
    s << indent << "get_distinct_packages: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_distinct_packages);
    s << indent << "get_commands: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_commands);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QB_DEVICE_SRVS_MESSAGE_GETMEASUREMENTSREQUEST_H
