// Generated by gencpp from file qb_device_msgs/DeviceConnectionInfo.msg
// DO NOT EDIT!


#ifndef QB_DEVICE_MSGS_MESSAGE_DEVICECONNECTIONINFO_H
#define QB_DEVICE_MSGS_MESSAGE_DEVICECONNECTIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qb_device_msgs
{
template <class ContainerAllocator>
struct DeviceConnectionInfo_
{
  typedef DeviceConnectionInfo_<ContainerAllocator> Type;

  DeviceConnectionInfo_()
    : id(0)
    , is_active(false)
    , port()  {
    }
  DeviceConnectionInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , is_active(false)
    , port(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _is_active_type;
  _is_active_type is_active;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _port_type;
  _port_type port;





  typedef boost::shared_ptr< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceConnectionInfo_

typedef ::qb_device_msgs::DeviceConnectionInfo_<std::allocator<void> > DeviceConnectionInfo;

typedef boost::shared_ptr< ::qb_device_msgs::DeviceConnectionInfo > DeviceConnectionInfoPtr;
typedef boost::shared_ptr< ::qb_device_msgs::DeviceConnectionInfo const> DeviceConnectionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator1> & lhs, const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.is_active == rhs.is_active &&
    lhs.port == rhs.port;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator1> & lhs, const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qb_device_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a1c593244281b064cf77ab64e673fe3";
  }

  static const char* value(const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a1c593244281b06ULL;
  static const uint64_t static_value2 = 0x4cf77ab64e673fe3ULL;
};

template<class ContainerAllocator>
struct DataType< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qb_device_msgs/DeviceConnectionInfo";
  }

  static const char* value(const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Device-independent message that constains: \n"
"\n"
"int32 id           # device id;\n"
"bool is_active     # motor activation status;\n"
"string port        # serial port\n"
;
  }

  static const char* value(const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.is_active);
      stream.next(m.port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceConnectionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qb_device_msgs::DeviceConnectionInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "is_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_active);
    s << indent << "port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QB_DEVICE_MSGS_MESSAGE_DEVICECONNECTIONINFO_H
